package com.example.hiroshi.rxtubeapp.ui.searchcondition

import android.arch.lifecycle.MutableLiveData
import android.arch.lifecycle.ViewModel
import com.example.hiroshi.rxtubeapp.data.repository.YoutubeSearchConditionRepository
import io.reactivex.disposables.CompositeDisposable

class SearchConditionViewModel(
        private val searchConditionRepository: YoutubeSearchConditionRepository
): ViewModel() {

    private val compositeDisposable: CompositeDisposable = CompositeDisposable()



    // Q
    val searchText: MutableLiveData<String> = MutableLiveData()

    // SearchType
    val videoTypeText = MutableLiveData<String>()
    val channelTypeText = MutableLiveData<String>()
    val playlistTypeText = MutableLiveData<String>()
    val isVideoTypeSelected = MutableLiveData<Boolean>()
    val isChannelTypeSelected = MutableLiveData<Boolean>()
    val isPlaylistTypeSelected = MutableLiveData<Boolean>()

    fun tapVideoType() {
        isVideoTypeSelected.value?.let { isVideoTypeSelected.postValue(!it) }
    }

    fun tapChannelType() {
        isChannelTypeSelected.value?.let { isChannelTypeSelected.postValue(!it) }
    }

    fun tapPlaylistType() {
        isPlaylistTypeSelected.value?.let { isPlaylistTypeSelected.postValue(!it) }
    }
}